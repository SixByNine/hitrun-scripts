best:
echo "[HITRUN] Generating candidates with ph-best "`date`
set cmd="$pulsarhunter/ph-best $prdfile $inputfile$cand_ext -minsnr $snr_lim"
set cmd="$timer$cmd"
echo $cmd
$cmd
set ex=$?
if ( $ex != 0 ) then
	echo "[HITRUN] ERROR: ph-best failed"
	echo "Failed command was:"
	echo $cmd
	exit $ex
endif

# @TODO: Here we should write out the DM-curves to '.sum' files for backwards compatability.


test:
rm -f tasklist >& /dev/null
touch tasklist
echo "[HITRUN] Using dspsr to fold candidates "`date`
#setting dspsr variables
rm grand.dat >&/dev/null

set subint_length = `$sigproc/header $inputfile -tobs | awk '{print $1/32.0}'`
foreach cand (`ls ${inputfile}${cand_ext}_???.phcx.gz`)
	set dm = `grep $cand $inputfile$cand_ext.lis | awk '{print $4}'`
	set period = `grep $cand $inputfile$cand_ext.lis | awk '{print $3/1000.0}'`
	set accn = `grep $cand $inputfile$cand_ext.lis | awk '{print $5}'`
	set candshort = `echo $cand | sed -e 's:.gz$::'`
        set archive_name = `echo $cand | sed -e 's:.phcx.gz::'`

	touch ${archive_name}.dat
#        echo "working on ${archive_name}.dat"
        echo "SOURCE: ${archive_name}_ars" >>! ${archive_name}.dat
	echo "PERIOD: ${period}" >>! ${archive_name}.dat
	echo "ACC: ${accn}" >>! ${archive_name}.dat
        echo "DM: ${dm}" >>! ${archive_name}.dat
	echo "-P ${archive_name}.dat " >>! grand.dat
end

echo zap chan `cat ${inputfile}.dspsrzap` >! postproc
echo "F 16" >> postproc

if ( -e $inputfile.rms == 0 ) then
	echo "Computing $inputfile.rms"
	set cmd="${dspsr} -U1 -Y -b -128 -c 10 -D 10 -O $inputfile.deleteme ${inputfile}"
	echo $cmd
	$cmd
	set ex=$?
	if ( $ex != 0 ) then
		echo "[HITRUN] ERROR: computation of $inputfile.rms failed"
		echo "Failed command was:"
		echo $cmd
		exit $ex
	endif

	\rm -f $inputfile.deleteme
	mv pdmp.stats $inputfile.rms
endif

# removed -t whilst it confilcts with -Y
set cmd="${dspsr} -J postproc -U1 -t $nthread -b -128 -L${subint_length} `cat grand.dat` ${inputfile}"
echo $cmd
$cmd
set ex=$?
if ( $ex != 0 ) then
        echo "[HITRUN] ERROR: dspsr failed"
        echo "Failed command was:"
        echo $cmd
        exit $ex
endif


fold:

rm -f tasklist
rm -f pdmp.per
rm -f pdmp.posn
touch tasklist
foreach cand (`ls ${inputfile}${cand_ext}*.phcx.gz`)
        set candshort = `echo $cand | sed -e 's:.gz$::'`
	set archive_name = `echo $cand | sed -e 's:.phcx.gz::'`

	set subdir = ${archive_name}_ars

	echo "${psradd} -o $archive_name.ar $subdir/*.ar && $utils/fix_ar_header $psrxml $archive_name.ar && $pdmp -rms-file $inputfile.rms -mw $minwidth -g /null -input-phcx $cand -output-phcx $candshort $archive_name.ar" >> tasklist
end
$utils/multitask tasklist $nthread


rm -f  ${inputfile}${cand_ext}.summary
echo "suspect beam gl gb MJD period p_err dm dm_err width width/period fold pdmpsnr bestsnr time_scint freq_scint time_freq_scint" > ${inputfile}.summary
foreach cand (`ls ${inputfile}${cand_ext}*.phcx`)
	rm $cand.gz
	gzip $cand
        set archive_name = `echo $cand | sed -e 's:.phcx::'`

	# make summary file
	set bline = `cat pdmp.posn | grep ${archive_name}.ar`
	set cline = `cat pdmp.per | grep ${archive_name}.ar`
	set suspect = $bline[10]
	set suspect_short = `echo ${suspect} | awk '{print substr($1,6,32)}'`
	set susno = $bline[1]
	set gl = $bline[2]
	set gb = $bline[3]
	set MJD = $bline[5]
	set p = $bline[6] 
	set p_err = $bline[7]
	set DM = $bline[8]
	set DM_err = $bline[9]
	set width = $cline[6]
	set widthratio = `echo ${width} ${p} | awk '{print $1/$2}'`
	set snr = $bline[4]
	set tscint = $cline[9]
	set fscint = $cline[10]
	set tfscint = $cline[11]

	set fold = `cat ${inputfile}.lis | grep $cand | awk '{print $8}'`
	set bestsnr = `cat ${inputfile}.lis | grep $cand | awk '{print $2}'`

	echo "${suspect_short} ${beam} ${gl} ${gb} ${MJD} ${p} ${p_err} ${DM} ${DM_err} ${width} ${widthratio} ${fold} ${snr} ${bestsnr} ${tscint} ${fscint} ${tfscint}" >>! ${inputfile}${cand_ext}.summary


end
